#include <SoftwareSerial.h>
#include <Servo.h>
#define trigpin1 12
#define echopin1 13
#define led1 5
#define led2 6
#define led3 7
#define led4 8
SoftwareSerial sgsm(2, 3);
Servo Servo1;
int pirPin = 4;
int pirState = 0;
int calibrationTime = 10;
const unsigned long eventTime_1 = 1000;
const unsigned long eventTime_2 = 5000;

unsigned long previousTime_1 = 0;
unsigned long previousTime_2 = 0;
void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  sgsm.begin(9600);
  Servo1.attach(9);
  delay(1000);
  Servo1.write(0);
  delay(1000);
  Servo1.detach();
  pinMode(trigpin1, OUTPUT);
  pinMode(echopin1, INPUT);
  pinMode(pirPin, INPUT);
  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);
  pinMode(led3, OUTPUT);
  pinMode(led4, OUTPUT);
  digitalWrite(led1, LOW);
  digitalWrite(led2, LOW);
  digitalWrite(led3, LOW);
  digitalWrite(led4, LOW);
  delay(calibrationTime * 100); //30 Second Delay
  Serial.println("SMART DUSTBIN IS Ready TO WORK");
  Servo1.attach(9);
}
bool flag = false;
bool flag1 = false;
long Distance1, Duration1;

void loop() {
  // put your main code here, to run repeatedly:
  unsigned long currentTime = millis();

  if ( currentTime - previousTime_1 >= eventTime_1 )
  {
    Serial.println("PIR");
    pirState = digitalRead(pirPin);
    if (pirState == HIGH)
    {
      Servo1.attach(9);
      Serial.println("OPEN LID");
      Servo1.write(100);
      delay(10000);
      flag1 = true;
    }
    else if (pirState == LOW) {
      Serial.println("Close LID");
      if(flag1 == false)
      {
        Servo1.detach();
        delay(30);
      }
      else if(flag1 == true)
      {
      Servo1.write(0);
      delay(15);
      flag1 = false;
      }
    }
    previousTime_1 = currentTime;
  }

  if ( currentTime - previousTime_2 >= eventTime_2 )
  {

    Serial.println("Ultrasonic");
    digitalWrite(trigpin1, LOW);
    delayMicroseconds(2);
    digitalWrite(trigpin1, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigpin1, LOW);
    Duration1 = pulseIn(echopin1, HIGH);
    Distance1 = (Duration1 / 2) / 29.1;
    Serial.print("Distance:");
    Serial.println(Distance1);

    if ((Distance1 >= 21) && (Distance1 <= 30))
    {
      Serial.println("level 1");
      digitalWrite(led1, HIGH);
      digitalWrite(led2, LOW);
      digitalWrite(led3, LOW);
      digitalWrite(led4, LOW);
      flag = false;
    }
    else if ((Distance1 >= 15) && (Distance1 <= 20))
    {
      Serial.println("level 2");
      digitalWrite(led1, LOW);
      digitalWrite(led2, HIGH);
      digitalWrite(led3, LOW);
      digitalWrite(led4, LOW);
    }
    else if ((Distance1 >= 7) && (Distance1 <= 14) )
    {
      Serial.println("level 3");
      digitalWrite(led1, LOW);
      digitalWrite(led2, LOW);
      digitalWrite(led3, HIGH);
      digitalWrite(led4, LOW);
      gsm1();
    }
    else if ((Distance1 >= 0) && (Distance1 <= 6) )
    {
      Serial.println("level 4");
      digitalWrite(led1, LOW);
      digitalWrite(led2, LOW);
      digitalWrite(led3, LOW);
      digitalWrite(led4, HIGH);
      gsm2();
      if ( flag == false )
      {
       
        flag = true;
      }
    }
    else
    {
      digitalWrite(led1, LOW);
      digitalWrite(led2, LOW);
      digitalWrite(led3, LOW);
      digitalWrite(led4, LOW);
    }

    previousTime_2 = currentTime;
  }

}


void gsm0()
{
  sgsm.begin(9600);
  sgsm.print("\r");
  delay(1000);
  sgsm.print("AT+CMGF=1\r");
  delay(1000);
  sgsm.print("AT+CMGS=\"+916302049661\"\r");
  delay(1000);
  sgsm.print("MPMC lab bin is filled 50% ");
  sgsm.println("Empty the bin ASAP ");
  delay(1000);
  sgsm.write(0x1A);
  delay(1000);
}
void gsm1()
{
  sgsm.begin(9600);
  sgsm.print("\r");
  delay(1000);
  sgsm.print("AT+CMGF=1\r");
  delay(1000);
  sgsm.print("AT+CMGS=\"+916302049661\"\r");
  delay(1000);
  sgsm.print("MPMC lab bin is filled 75% ");
  sgsm.println("Empty the bin ASAP ");
  delay(1000);
  sgsm.write(0x1A);
  delay(1000);
}
void gsm2()
{
  sgsm.begin(9600);
  sgsm.print("\r");
  delay(1000);
  sgsm.print("AT+CMGF=1\r");
  delay(1000);
  sgsm.print("AT+CMGS=\"+916302049661\"\r");
  delay(1000);
  sgsm.print("MPMC lab bin is filled 100% ");
  sgsm.println("Empty the bin ASAP ");
  delay(1000);
  sgsm.write(0x1A);
  delay(1000);
}
